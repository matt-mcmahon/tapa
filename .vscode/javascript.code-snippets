{
  "Re-Export Module": {
    "prefix": "rexport",
    "description": "Re-Exports the Module",
    "body": [
      "export { $1 } from \"./$1.js\"",
    ]
  },
  "Riteway-Style Test": {
    "prefix": "plan",
    "description": "Insert Test Plan",
    "body": [
      "{",
      "  const actual = $1",
      "  const expected = $2",
      "  const given = inspect`$3`",
      "  const should = inspect`$4`",
      "  ${5:assert}({ given, should, actual, expected })",
      "}",
      "$0"
    ]
  },
  "New Typing": {
    "prefix": "new dts",
    "description": "Scaffold a Type File",
    "body": [
      "/**",
      " * ```",
      " * ${1:${TM_FILENAME_BASE/(\\.d)//}}$2",
      " * ```",
      " * -----------------------------------------------------------------------------",
      " * ",
      " * $3",
      " * ",
      " */",
      "export declare function $1(${4:arg}: ${5:any}): ${6:any}$0"
    ]
  },
  "New Module File": {
    "prefix": "new module",
    "description": "Scaffold a Module File",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ${0:value => () => value}",
      "",
      "export { $1 }"
    ]
  },
  "New Test File": {
    "prefix": "new test",
    "description": "Scaffold a Test File",
    "body": [
      "import { describe, Try } from \"riteway\"",
      "import { inspect } from \"../inspect\"",
      "import { ${1:${TM_FILENAME_BASE/(\\.test|\\.spec)//}} } from './$1'",
      "import { $1 as indexExport } from '.'",
      "",
      "describe(\"$1 module\", async assert => {",
      "  {",
      "    const given = inspect`module named \\${\"./$1\"}`",
      "    const should = inspect`have an export named \\${$1}`",
      "    const actual = typeof $1",
      "    const expected = \"function\"",
      "    assert({ given, should, actual, expected })",
      "  }",
      "  ",
      "  {",
      "    const given = inspect`index export`",
      "    const should = inspect`be identical to named export`",
      "    const actual = indexExport",
      "    const expected = $1",
      "    assert({ given, should, actual, expected })",
      "  }",
      "  ",
      "  $0${TM_SELECTED_TEXT:throw new Error(\"Add Functionality Tests!\")}",
      "})",
    ]
  }
}
